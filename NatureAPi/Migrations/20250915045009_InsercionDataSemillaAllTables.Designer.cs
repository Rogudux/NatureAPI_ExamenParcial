// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureAPi;

#nullable disable

namespace NatureAPi.Migrations
{
    [DbContext(typeof(NatureDBContext))]
    [Migration("20250915045009_InsercionDataSemillaAllTables")]
    partial class InsercionDataSemillaAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryAPI.models.entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Departamento frente a playa isla mujeres"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cabaña a un lado de monumentos en playa isla mujeres"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zona de campamento en selva lacandona"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bote equipado en medio del rio en selva lacandona"
                        });
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            URL = "https://images.odigoo.com/cb6a1e9c-21c6-4165-9ba7-db9263d832a1/images/media/isla-mujeres-beaches/webp/playa-norte-htfw.webp"
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            URL = "https://cdn.sanity.io/images/atvntylo/production/52a6fcd9855b358bda42ad22de46ad0dfdbd7673-1200x630.png"
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 2,
                            URL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQNIIv3OeZuYBcyk2F1mR6e-19hILJZ5BpiVA&s"
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 2,
                            URL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9BeIi7ay8rQgZG4HEnLqGsjwmdFgKo_81xg&s"
                        });
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Place");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Playa",
                            CreatedAt = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Reconocida mundialmente por su arena blanca y fina, y sus aguas cristalinas de poca profundidad y oleaje suave, ideal para nadar y relajarse.",
                            ElevationMeters = 1,
                            EntryFee = 0.0,
                            Latitude = 21.2577,
                            Longitude = -86.7517,
                            Name = "Playa Isla Mujeres",
                            OpeningHours = "Abierto 24 horas"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = true,
                            Category = "Selva",
                            CreatedAt = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Una de las regiones de mayor diversidad biológica de México y el mundo. Es el corazón de la selva tropical más grande del país y hogar de especies como el jaguar y la guacamaya roja.",
                            ElevationMeters = 200,
                            EntryFee = 300.0,
                            Latitude = 16.633299999999998,
                            Longitude = -91.0,
                            Name = "Selva Lacandona",
                            OpeningHours = "Varía según el tour; generalmente 7:00 AM - 6:00 PM"
                        });
                });

            modelBuilder.Entity("LibraryAPI.models.entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenity");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 3
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 4
                        });
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Facil",
                            DistanceKm = 1.2,
                            EstimatedTimeMinutes = 25,
                            IsLoop = true,
                            Name = "Sendero Escultórico de Punta Sur",
                            Path = "Un camino costero que rodea el acantilado sur de la isla, pasando por un jardín de esculturas y con vistas espectaculares al mar Caribe.",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Dificil",
                            DistanceKm = 2.5,
                            EstimatedTimeMinutes = 45,
                            IsLoop = true,
                            Name = "Circuito de la Salina Grande",
                            Path = "Ruta plana que bordea la laguna salada en el centro de la isla, ideal para observar aves y disfrutar de un paisaje diferente al de la playa.",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Intermedio",
                            DistanceKm = 4.5,
                            EstimatedTimeMinutes = 120,
                            IsLoop = false,
                            Name = "Sendero del Río Lacanjá",
                            Path = "Una caminata inmersiva a lo largo de la ribera del río Lacanjá, atravesando vegetación densa y puentes colgantes, terminando en una serie de cascadas.",
                            PlaceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "Facil",
                            DistanceKm = 3.0,
                            EstimatedTimeMinutes = 90,
                            IsLoop = true,
                            Name = "Exploración de la Zona Arqueológica de Yaxchilán",
                            Path = "Circuito que conecta las principales estructuras y estelas mayas de Yaxchilán, un sitio accesible solo por río. El sendero está rodeado por el sonido de monos aulladores.",
                            PlaceId = 2
                        });
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Photo", b =>
                {
                    b.HasOne("LibraryAPI.models.entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LibraryAPI.models.entities.PlaceAmenity", b =>
                {
                    b.HasOne("LibraryAPI.models.entities.Amenity", "Amenity")
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAPI.models.entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Review", b =>
                {
                    b.HasOne("LibraryAPI.models.entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Trail", b =>
                {
                    b.HasOne("LibraryAPI.models.entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LibraryAPI.models.entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
